@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0 
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

package jeu
{
    class Affichage
    {
        + <<Create>> Affichage()
        + {static} afficherTour(tour : Integer, nomJoueur : String)
        + {static} afficherTerrain(ordinateur : Joueur, joueur : Joueur)
        - {static} afficherPokemonCarte(listePokemon : Pokemon[*])
        + {static} afficherMain(joueur : Joueur)
        + {static} demanderPokemonPlacer(main : Pokemon[*])
        + {static} demanderPokemonAJouer(joueur : Joueur)
        + {static} demanderUtiliserPouvoir(pokemons : Pokemon[*], utiliser : Boolean)
        + {static} demanderPokemonPouvoir(joueur : Joueur)
        + {static} pokemonAfficher(pokemons : Pokemon[*])
        + {static} pokemonAfficherEnnemie(pokemons : Pokemon[*])
        + {static} pokemonDemanderAfficher(pokemons : Pokemon[*])
        + {static} finAttaquePokemon(ennemi : Pokemon, degatInflige : Integer)
        + {static} affichageDebutJeu()
        + {static} barreDeChargement(duree : Integer)
        + {static} affichagePhrase(texte : String)
    }
    class Defausse
    {
        + <<Create>> Defausse()
        + getDefausse() : Pokemon[*]
        + ajouterPokemonDefausse(pokemon : Pokemon)
        + tailleDefausse() : Integer
    }
    class Jeu
    {
        -  pokemonPremiereGenerationArray : String[*]
        -  m_listeNomPokemon : String[*]
        + <<Create>> Jeu()
        + initialisation()
        + initialisationPlacer(premierJoueur : Joueur, deuxiemeJoueur : Joueur)
        + initialisationJoueur()
        + tour(nbTour : Integer)
        + placer(nbTour : Integer)
        + attaquerTour()
        + pouvoir()
        + attaquer(premierJoueur : Joueur, deuxiemeJoueur : Joueur)
        + start()
        + gagnantPerdant()
    }
    class Joueur
    {
        #  m_premierJoueur : Boolean
        + <<Create>> Joueur(premierJoueur : Boolean, pioche : Pioche)
        + getMain() : Main
        + getPioche() : Pioche
        + getTerrainPokemon() : Pokemon[*]
        + getMainPokemon() : Pokemon[*]
        + getDefausse() : Pokemon[*]
        + getPiochePokemon() : Pokemon[*]
        + getTaillePioche() : Integer
        + getPremierJoueur() : Boolean
        + piocher()
        + placer()
        + scanInt() : Integer
        + attaquer(ennemi : Joueur)
        + aUnPouvoir() : Boolean
        + utiliserPouvoir(ennemi : Joueur)
        + afficherPouvoir()
        + choisirPouvoir(utiliser : Boolean) : Integer
        + indiceValidePouvoir(indice : Integer, tailleTerrain : Integer, messageErreur : String) : Boolean
        + choisirPokemonAttributPouvoir() : Integer
        + choisirPokemonAttributPouvoir(ennemi : Joueur) : Integer
        + choisirPokemonAllie() : Integer
        + choisirPokemonEnnemi(ennemi : Joueur) : Integer
        + reutiliserPokemon()
        + indiceValide(indice : Integer, tailleTerrain : Integer, messageErreur : String, joueur : Joueur) : Boolean
        + indiceValidePokemonPouvoir(indice : Integer, tailleTerrain : Integer, messageErreur : String) : Boolean
        + pokemonAPerdu(pokemonQuiAEteAttaque : Pokemon)
        + aPerdu() : Boolean
        + aGagne(ennemi : Joueur) : Boolean
        + toString() : String
    }
    class Main
    {
        + <<Create>> Main()
        + getMain() : Pokemon[*]
        + ajouterPokemonMain(pokemon : Pokemon)
        + tailleMain() : Integer
        + getPokemon(indice : Integer) : Pokemon
        + supprimePokemonMain(pokemon : Pokemon)
        + supprimePokemonMain(indice : Integer)
    }
    class Ordinateur extends Joueur
    {
        -  m_indiceProchainPokemonAttaque : Integer
        -  m_indiceProchainPokemonPouvoir : Integer
        + <<Create>> Ordinateur(premierJoueur : Boolean, pioche : Pioche)
        + attaquer(ennemi : Joueur)
        + trouverLePlusFaible(listePokemon : Pokemon[*]) : Pokemon
        + placer()
        + indicePouvoir() : Integer[*]
        + aUnPouvoir() : Boolean
        + utiliserPouvoir(ennemi : Joueur)
        + choisirPokemonAttributPouvoir() : Integer
        + choisirPokemonAttributPouvoir(ennemi : Joueur) : Integer
        + toString() : String
    }
    class Pioche
    {
        -  m_taillePioche : Integer
        -  m_listeNomPokemon : String[*]
        + <<Create>> Pioche(premierJoueur : Boolean, listeNomPokemon : String[*], listePouvoir : Pouvoir[*])
        + getPioche() : Pokemon[*]
        + genererPiocheAleatoire()
        + genererPokemonAleatoire() : Pokemon
        + pouvoirAleatoire() : Pouvoir
        + piocher()
        + getTaillePioche() : Integer
        + setJoueur(joueur : Joueur)
    }
    class Terrain
    {
        + <<Create>> Terrain()
        + getTerrain() : Pokemon[*]
        + supprimePokemonTerrain(pokemon : Pokemon)
        + placer()
        + placerOrdi()
        + choisirPokemonPlacer() : Integer
        + indiceValidePokemonPlacer(indice : Integer, tailleMain : Integer, messageErreur : String) : Boolean
        + getPokemon(indice : Integer) : Pokemon
        + tailleTerrain() : Integer
        + setJoueur(joueur : Joueur)
    }
    class test
    {
        + <<Create>> test()
        + {static} main(args : String[*])
    }
}



package pokemon
{
    enum Affinite <<enum>>
    {
        AIR
        EAU
        FEU
        TERRE
    }
    class Air extends Element
    {
         + <<Create>> Air()
         + getAffinite() : Affinite
         + getAvantage() : Affinite
         + getDesavantage() : Affinite
         + degatAInfliger(ennemi : Element, attaque : Integer) : Integer
    }
    class Eau extends Element
    {
         + <<Create>> Eau()
         + getAffinite() : Affinite
         + getAvantage() : Affinite
         + getDesavantage() : Affinite
         + degatAInfliger(ennemi : Element, attaque : Integer) : Integer
    }
    abstract class Element <<abstract>>
    {
         + <<Create>> Element()
         + {abstract} getAffinite() : Affinite
         + {abstract} getDesavantage() : Affinite
         + {abstract} getAvantage() : Affinite
         + degatAInfliger(ennemi : Element, attaque : Integer) : Integer
    }
    class Feu extends Element
    {
         + <<Create>> Feu()
         + getAffinite() : Affinite
         + getAvantage() : Affinite
         + getDesavantage() : Affinite
         + degatAInfliger(ennemi : Element, attaque : Integer) : Integer
    }
    class Pokemon
    {
         - {readOnly}  m_nom : String
         -  m_vie : Integer
         - {readOnly}  m_vieMax : Integer
         -  m_attaque : Integer
         -  m_defense : Integer
         -  m_estDejaUtilise : Boolean
         + <<Create>> Pokemon(nom : String, vieMax : Integer, attaque : Integer, type : Element, pouvoir : Pouvoir)
         + ajouterType(type : Element)
         + estEnVie() : Boolean
         + getNom() : String
         + getVie() : Integer
         + getVieMax() : Integer
         + getAttaque() : Integer
         + seFaitAttaquer(attaque : Integer)
         + attaque(ennemi : Pokemon)
         + getPouvoir() : Pouvoir
         + getType() : Element[*]
         + getEstDejaUtilise() : Boolean
         + setEstDejaUtilise(m_estDejaUtilise : Boolean)
         + setAttaque(attaque : Integer)
         + setDefense(defense : Integer)
         + setVie(vie : Integer)
    }
    class Terre extends Element
    {
         + <<Create>> Terre()
         + getAffinite() : Affinite
         + getAvantage() : Affinite
         + getDesavantage() : Affinite
         + degatAInfliger(ennemi : Element, attaque : Integer) : Integer
    }
}

package pouvoir
{
    class Bersek extends Pouvoir
    {
        -  m_attaqueDouble : Integer
        + <<Create>> Bersek(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + getEstDejaUtilise() : Boolean
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class FerveurGuerriere extends Pouvoir
    {
        + <<Create>> FerveurGuerriere(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class Intimidation extends Pouvoir
    {
        -  m_attaqueReduit : Integer
        + <<Create>> Intimidation(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + getEstDejaUtilise() : Boolean
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class Kamikaze extends Pouvoir
    {
        + <<Create>> Kamikaze(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + utilisationPouvoir(ennemi : Joueur, pokemonDetenteur : Pokemon)
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class Peur extends Pouvoir
    {
        + <<Create>> Peur(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    abstract class Pouvoir <<abstract>>
    {
        #  m_nomPouvoir : String
        #  m_estReutilisable : Boolean
        #  m_estDejaUtilise : Boolean
        + <<Create>> Pouvoir(nomPouvoir : String, estReutilisable : Boolean)
        + getNomPouvoir() : String
        + getEstDejaUtilise() : Boolean
        + getEstReutilisable() : Boolean
        + setEstDejaUtilise(estDejaUtilise : Boolean)
        + setJoueur(joueur : Joueur)
        + getPokemonChoisie() : Pokemon
        + {abstract} afficherDescripition()
        + {abstract} utilisationPouvoir()
        + {abstract} choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class Resistance extends Pouvoir
    {
        + <<Create>> Resistance(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class SoinSimple extends Pouvoir
    {
        + <<Create>> SoinSimple(nomPouvoir : String, estReutilisable : Boolean)
        + getEstDejaUtilise() : Boolean
        + afficherDescripition()
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
    class SoinsTotal extends Pouvoir
    {
        + <<Create>> SoinsTotal(nomPouvoir : String, estReutilisable : Boolean)
        + afficherDescripition()
        + utilisationPouvoir()
        + choisirPokemon(ennemi : Joueur, pokemonDetenteur : Pokemon)
    }
}
Ordinateur ...> Element : <<use>>

Jeu *--> "1\n - m_joueur1"Joueur
Jeu *--> "1\n - m_joueur2"Joueur

Pioche *--> "0..21\n # m_pioche" Pokemon
Main *--> "0..5\n # m_main" Pokemon
Terrain *--> "0..3\n # m_terrain" Pokemon
Defausse *--> "*\n # m_defausse" Pokemon

Joueur ..> Affichage : <<call>>
Joueur ..> Pouvoir : <<use>>
Joueur o--> "1\n # m_pioche"Pioche
Joueur o--> "1\n # m_main"Main
Joueur o--> "1\n # m_terrain"Terrain
Joueur o--> "1\n # m_defausse"Defausse

Pouvoir o--> "1\n - m_joueur"Joueur


Pokemon *--> "*\n - m_type" Element
Element ..> Affinite : <<use>>
Air ..> Affinite : <<use>>
Eau ..> Affinite : <<use>>
Feu ..> Affinite : <<use>>
Terre ..> Affinite : <<use>>

Pokemon o--> "0..1\n - m_pouvoir"Pouvoir

Affichage ..> Joueur : <<use>>
Affichage ..> Pokemon : <<use>>
test ..> Jeu : <<instantiate>>

Pioche o--> "1\n - m_joueur"Joueur
Terrain o--> "1\n - m_joueur"Joueur
@enduml